pipeline {
    agent any
    environment {
        CF_API = 'XXXX'
        CF_USER = 'XXXX'
        CF_PWD = 'XXXX'
        CF_APP = 'XXXX'
        CF_APP_DOMAIN = 'XXXX'
        CF_SERVICE_NAME = 'XXXX'
    }
    stages {
        stage ('Initialize') {
            steps {
                git url: 'https://github.com/azwickey-pivotal/fortune-demo.git'
            }
        }

        stage ('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage ('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage ('Deploy - Dev') {
            environment {
              CF_ORG = 'XXXX'
              CF_SPACE = 'XXXX'
            }
            steps {
                sh '''
                cf api $CF_API --skip-ssl-validation
                cf login -u $CF_USER -p $CF_PWD -o "$CF_ORG" -s "$CF_SPACE"
                cf apps

                set +e
                export CURR_APP_COLOR=$(cf apps | grep "$CF_APP.$CF_APP_DOMAIN" | awk '{print $1}')
                echo "Current Color: $CURR_APP_COLOR"
                case $CURR_APP_COLOR in
                    $CF_APP-green)
                        export CURRENT="green"
                        export NEXT="blue"
                        ;;
                    $CF_APP-blue)
                        export CURRENT="blue"
                        export NEXT="green"
                        ;;
                    *)
                        export CURRENT="blue"
                        export NEXT="green"
                        ;;
                esac

                echo "Current main app routes to app instance $CURRENT"
                echo "New version of app to be deployed to instance $NEXT"
                echo "$CURRENT" > curr.txt
                echo "$NEXT" > next.txt
                '''

                sh '''
                cp target/fortune-0.0.1-SNAPSHOT.jar .
                sed "s/APPNAME/$CF_APP-$(cat ./next.txt)/" ./ci/manifest.yml > manifest-1.yml
                sed "s/APPSERVICE/$CF_SERVICE_NAME/" manifest-1.yml > manifest-2.yml
                sed "s/APPPATH/fortune-0.0.1-SNAPSHOT.jar/" manifest-2.yml > manifest-dev.yml

                cat manifest-dev.yml
                '''

                sh '''
                cf push -f manifest-dev.yml
                '''
            }
        }

        stage ('Integration Test') {
            steps {
                sh '''
                echo "Current: $(cat ./curr.txt)"
                echo "Next: $(cat ./next.txt)"
                URL=http://$CF_APP-$(cat ./next.txt).$CF_APP_DOMAIN/fortunes

                echo "Running curl integration tests..."

                curl --include -k $URL | grep "HTTP/1.1 200 OK"
                '''

                sh '''
                echo "Current: $(cat ./curr.txt)"
                echo "Next: $(cat ./next.txt)"
                URL=http://$CF_APP-$(cat ./next.txt).$CF_APP_DOMAIN/fortunes

                echo "Running curl integration tests..."

                curl --include -k $URL | grep "HTTP/1.1 200 OK"
                '''

                sh '''
                cf apps
                cf routes

                # Map route to "next" app
                NEXT_APP_COLOR=$(cat ./next.txt)
                echo "Mapping main app route to point to $NEXT_APP_COLOR instance"
                cf map-route $CF_APP-$NEXT_APP_COLOR $CF_APP_DOMAIN --hostname $CF_APP

                # Delete old App
                export OLD_APP_COLOR=$(cat ./curr.txt)
                cf delete $CF_APP-$OLD_APP_COLOR -f


                echo "Apps and Routes updated"
                cf apps
                cf routes
                '''
            }
        }

        stage ('Deploy - Prod') {
            environment {
              CF_ORG = 'XXXX'
              CF_SPACE = 'XXXX'
              CF_APP = 'XXXX'
            }
            steps {
                sh '''
                cf login -u $CF_USER -p $CF_PWD -o "$CF_ORG" -s "$CF_SPACE"
                cf apps

                set +e
                export CURR_APP_COLOR=$(cf apps | grep "$CF_APP.$CF_APP_DOMAIN" | awk '{print $1}')
                echo "Current Color: $CURR_APP_COLOR"
                case $CURR_APP_COLOR in
                    $CF_APP-green)
                        export CURRENT="green"
                        export NEXT="blue"
                        ;;
                    $CF_APP-blue)
                        export CURRENT="blue"
                        export NEXT="green"
                        ;;
                    *)
                        export CURRENT="blue"
                        export NEXT="green"
                        ;;
                esac

                echo "Current main app routes to app instance $CURRENT"
                echo "New version of app to be deployed to instance $NEXT"
                echo "$CURRENT" > curr-prod.txt
                echo "$NEXT" > next-prod.txt
                '''

                sh '''
                cp target/fortune-0.0.1-SNAPSHOT.jar .
                sed "s/APPNAME/$CF_APP-$(cat ./next-prod.txt)/" ./ci/manifest.yml > manifest-prod-1.yml
                sed "s/APPSERVICE/$CF_SERVICE_NAME/" manifest-prod-1.yml > manifest-prod-2.yml
                sed "s/APPPATH/fortune-0.0.1-SNAPSHOT.jar/" manifest-prod-2.yml > manifest-prod.yml

                cat manifest-prod.yml
                '''

                sh '''
                cf push -f manifest-prod.yml
                '''
            }
        }

        stage ('Smoke Test') {
            environment {
              CF_APP = 'XXXX'
            }
            steps {
                sh '''
                echo "Current: $(cat ./curr-prod.txt)"
                echo "Next: $(cat ./next-prod.txt)"
                URL=http://$CF_APP-$(cat ./next-prod.txt).$CF_APP_DOMAIN/fortunes

                echo "Running curl integration tests..."

                curl --include -k $URL | grep "HTTP/1.1 200 OK"
                '''
            }
        }

        stage ('Production Release') {
            environment {
              CF_APP = 'XXXX'
            }
            steps {
                sh '''
                cf apps
                cf routes

                # Map route to "next" app
                NEXT_APP_COLOR=$(cat ./next-prod.txt)
                echo "Mapping main app route to point to $NEXT_APP_COLOR instance"
                cf map-route $CF_APP-$NEXT_APP_COLOR $CF_APP_DOMAIN --hostname $CF_APP

                # Delete old App
                export OLD_APP_COLOR=$(cat ./curr-prod.txt)
                cf delete $CF_APP-$OLD_APP_COLOR -f


                echo "Apps and Routes updated"
                cf apps
                cf routes
                '''
            }
        }
    }
}